제이콥님의 글을 통해서 실기시험이 만만치 않다는 것을 확인해서 필기도 필기지만 실기도 같이 준비해야할 것 같아서 
그동안 난삽하게 배운 것들을 다시 정리해나갈려고 하는데, 기왕 공부하는거 여러분들과도 공유하는게 좋을 것 같다는
생각을 했습니다.
(솔직히 말씀드리면 그 책 ADP 가이드 너무 보기 불편해서 실기위주로 공부를 하고, 성공여부는 운에 맡길려고요.)

각설하옵고,
아래는 제가 Rmd파일로 정리한 내용입니다. 혹시 실행해 보실려면, knitr 패키지를 install하시고, library적용하신 후에
첨부한 Rmd 파일을 이용하셔서 데이터 다운로드 받으시고, 적당한 디렉토리에 옮기신후, 
Rmd파일내에서 디렉토리를 본인환경에 맞추신다음 실행하시면 됩니다.

원 개발자가 직접 설명한 Rmd 처음 사용법 동영상은 이곳에서 찾으실 수 있습니다. -> (http://yihui.name/knitr/)

마지막으로 아래 내용중에 
```{r ~~~~ }
```
이런 부분들은 실행용 코드를 집어넣으라고 만든 Rmd의 약속된 표시입니다. 일일이 지우기 뭐해서 그냥 뒀습니다.
양해를 부탁드립니다.

20140703_데이터로딩 및 날짜 데이터 변환 정리

1.Data source

   [Kaggle Bike Sharing Demand](https://www.kaggle.com/c/bike-sharing-demand/data)
   
   Fanaee-T, Hadi, and Gama, Joao, Event labeling combining ensemble  detectors and background knowledge, Progress in Artificial Intelligence (2013): pp. 1-15, Springer Berlin Heidelberg.


2.CSV화일 로딩시 데이터 타입을 미리 지정하면 읽어들인 후에
  다시 데이터 타입을 맞추어주는 수고를 덜 수 있고,
  로딩 속도도 빨라진다.
  (Coursera computing with data by Dr. Roger Peng)
   
1) 가장 편한 방법으로 읽어들이면 날짜필드가 Factor로 읽힌다.

```{r data loaing}

# 디렉토리 주소는 각자의 상황에 맞게 조정 필요

dummy <- read.csv("~/BikeSharing/data/train.csv",nrows=5)
head(dummy)
str(dummy)
```

2) csv나 텍스트 파일을 읽어들일때 날짜, 문자열 등의 클래스를 지정할려면 colClasses를 read.csv에서 지정해 주면 된다.
   참고로 Kaggle 고수님은 아래와 같이 데이터를 R에 올리신다.
   정성껏 클래스를 정확히 지정해 주시는 것을 볼 수 있다.
   그리고 친절하게도 필요시 디렉토리는 변경해야한다고 각주까지
   달아 주신다. (나도 본받아서 위에서 그렇게 했다.)
   
   [이분이시다. 생기기도 잘생기셨다](https://www.kaggle.com/c/walmart-recruiting-store-sales-forecasting/forums/t/8125/first-place-entry/44434#post44434)

```{r}
#TODO: set data, submit and r paths to correct directories, if needed
paths = list(data='../data/',
             submit='../submissions/',
             r='../R/')

raw.train <- function(){
  # Loads the training data with correct classes
  cls <- c('factor', 'factor', 'Date', 'numeric', 'logical')
  train <- read.csv(paste0(paths$data, 'train.csv'), 
                    colClasses=cls)
}
```

3) 근데 5개라면 뭐 저렇게 치겠지만, 이 데이터는 12개의 열이 있다.
   이걸 손으로 치는 건, 컴퓨터에 대한 예의가 아니라고 생각하다가,
   예전 Coursera의 Peng 선생님이 class를 읽어 들이는 방법을 배운게
   생각이났다.

```{r colClasses}
# dummy는 데이터변수명이고 class는 클래스를 뽑아내는 함수명이며,
# sapply는 이함수를 모든 열에 적용해서 값을 뽑아주는 함수다.
# for loop를 돌려주는 것과 유사한 기능을 한다.
# 마지막으로, csvclass는 그냥 임의로 지은 변수명이다.

csvClass <- sapply(dummy, class)
csvClass
```

4) csvclass의 datetime열의 클래스를 살짝 Date로 고쳐서 다시
   전체를 읽어들인다.
   
```{r applying colclass}
csvClass[1] <- 'Date'
csvClass

train <- read.csv("~/BikeSharing/data/train.csv",
                  colClasses=csvClass)
```

5) 근데 무슨 에러가 나네. integer로 지정한 곳중에 numeric이들어가
   있는 곳이 있는 모양이다.
   아, 그냥 올려도 올라가는데, 괜한 짓을 했다는 생각이 들기도 하지만
   그래도 내친길이라 뭐가 틀렸는지 찾아봐야 겠다.

```{r}
dummy <- read.csv("~/BikeSharing/data/train.csv",nrows=200)
head(dummy)
```

6) 확인을 해보니 위에서 5개만 뽑았을때는 integer였던 windspeed가 
   numeric으로 나온다.
   최소 100개 이상은 뽑아봐야 이런 불상사가 없는 모양이다.
   그렇지 선생님이 내게 틀린 걸 가르쳐 줄리가 없지.
   다시한번 해본다.

```{r}
csvClass <- sapply(dummy, class)
csvClass
csvClass[1] <- 'Date'
csvClass

train <- read.csv("~/BikeSharing/data/train.csv",
                  colClasses=csvClass)
head(train)

system.time(train <- read.csv("~/BikeSharing/data/train.csv",
                  colClasses=csvClass))

system.time(train <- read.csv("~/BikeSharing/data/train.csv"))

```

7) 잘 올라가긴 가는데, 이슈가 두개 있는 것 같다.
   첫째는 올라가는 시간은 오히려 클래스 지정하지 않은 것이 0.19초
   이고 클래스를 지정한 것이 약 30초 쯤 걸린다.
   내가 뭐한거지? 하는 생각이 들어서 잠시 생각을 해보니,
   역시 선생님이 나한테 나쁜 걸 가르쳐 줄리는 없다.
   굳이 클래스를 지정하는 것은 나중에 데이터타입변환에
   걸리는 시간까지 고려해서 로딩이 빨라진다는 의미인 것을
   알수 있다.
   
   둘째는 datetime에서 시간은 없고 그냥 날짜만 나와있다.
   음, 문제가 시간별로 예측을 하라는 것인데, 날짜만 올라가면
   이건 아니다. 이건 좀 문제가 심각하다.

```{r}

```

8) 물어볼 사람도 없는데... 지난번 분석대회에서
   POSIXlt와 POSIXct라는 Date 클래스를 텍스트를 날짜로 변환시킬때
   본적이 있는데, 그걸로 한번 해봐야겠다.

```{r}
csvClass[1] <- 'POSIXlt'
csvClass
train <- read.csv("~/BikeSharing/data/train.csv",
                  colClasses=csvClass)
```

9) 그럼 time인가? 이건 뭐 점쟁이도 아니고...

```{r}
csvClass[1] <- 'time'
csvClass
train <- read.csv("~/BikeSharing/data/train.csv",
                  colClasses=csvClass)
```


9) 다시 Date로 돌아온다. 혹시 이 날짜 속에 시간은 들어가 있지
   않은지 확인해 본다.

```{r Date class}

csvClass[1] <- 'Date' #희한하게도 'date'로 하면 에러가 난다.
csvClass
train <- read.csv("~/BikeSharing/data/train.csv",
                  colClasses=csvClass)
head(train)

unclass(train$datetime[1])
head(train$datetime)
```

10) 좀편하게 할 방법은 없는지 찾아 헤맸으나, 현재까지의 정답은
    그냥 factor로 읽어들여서 시간을 활용할 수 있도록 하는 방법인
    것 같다.

```{r strptime function}
csvClass[1] <- 'factor'
csvClass
train <- read.csv("~/BikeSharing/data/train.csv",
                  colClasses=csvClass)
head(train)
```

11) 날짜 형으로 바꾸어 놓으면 나중에 시간 활용하는데, 여러가지로 
    편하다.
    
  [Strptime 함수 포맷 세부 항목](http://www.inside-r.org/r-doc/base/strftime)

```{r applying strptime}

# factor변수를 날짜로 변환시키기 위해 strptime함수 이용

train$clock <- strptime(train$datetime,"%Y-%m-%d %H:%M:%S")
head(train)

class(train$clock)

# POSIXlt 클래스는 당초 Unix에서 날짜를 표현하기위해서 
# 만든 클래스라고 함. 연초부터의 날짜(yday), 시간(hour), 연도 등을
# 뽑아서 쓸 수 있어서 편리하다.

unclass(train$clock[1])
train[1,13]$hour
train[1,13]$year + 1900
train$clock[1]$mday

as.Date(train[1,13])
class(as.Date(train[1,13]))
```

12) 예를 들어 시간대별 이용자 분포를 알 수 있다.
    자료를 보니 예상외로 밤12시가 넘은 새벽에도 자전거를 이용하는 분들이 상당히 있네요.
    이런 분들을 위해서 자전거를 빌리는 곳에 야간용 가로등 등을
    잘 갖추어 놓으면 좋을 것 같습니다.

```{r POSIXlt class, eval=FALSE}

# tapply(더하고자 하는 칼럼, 분류기준이 되는 칼럼, 적용함수)

hourCount <- tapply(train$count, as.factor(train$clock$hour), sum)

head(hourCount)

plot(hourCount, main="시간대별 자전거 이용인구 분포")
text(as.numeric(names(hourCount)), hourCount, names(hourCount), col="red")
```

3.그런데 위의 캐글 페이지에서 링크를 따라가다 보니,
  다른 데이터도 있네요. 이런 걸 그냥 다 올려놓아서 활용하라고
  하는 걸 보면서 우리나라도 데이터 강국이 될려면 이런 걸 배워야 겠다라는
  생각을 했습니다.
   
1) 일단 데이터가 다 text라 모두 Factor로 올라갑니다.
   실기를 3시간만에 끝낼려면 이정도는 뭐 그냥 1분이내에
   다루기 편한 형태로 올릴 수 있어야 할 것 같습니다.
   
   [trip history data](http://www.capitalbikeshare.com/trip-history-data)

```{r}
dummy <- read.csv("~/BikeSharing/2014-1st-quarter.csv",nrows=200)
head(dummy)
str(dummy)

```

2) 이중 Duration과 Start.date가 날자 혹은 시간과 관계가 있다.
   일단 factor로 읽어들이고 날짜나 시간으로 바꾸는게 좋을 것 같다.

```{r}
q01 <- read.csv("~/BikeSharing/2014-1st-quarter.csv")

```

3) 일단 날짜 들은 쉽게 변환이 가능한데, 문제는 몇시간 동안
자전거를 이용했는지를 나타내는 Duration이 "0h 28m 36s"와 같은
형태로 되어 있어 strptime을 이용하기 힘들다.
   
```{r}
q01$startDate <- strptime(q01$Start.date,"%m/%d/%Y %H:%M")
q01$endDate <- strptime(q01$End.date,"%m/%d/%Y %H:%M")
head(q01)
```